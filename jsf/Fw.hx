/*The Fireworks Object

http://help.adobe.com/en_US/fireworks/cs/extend/WS7DDB8FBF-F88D-4f93-A12C-02AD66B70BA0.html

The Fireworks object is a global object, which you can use to set or retrieve properties that relate to the current operating environment. (The App object that was used in Fireworks 3 is supported for backward compatibility, but its use is deprecated in favor of the Fireworks object.)

The following table lists the properties of the Fireworks object, along with their data types and, where appropriate, acceptable values and notes. Read-only properties are marked with a bullet (•).

Note: For information on how to format nonstandard data types, such as rectangle or point, see Formatting nonstandard data types.
Refer to the Fireworks object by using public static function propertyName or fireworks.propertyName. Note that fireworks must be lowercase.
*/

 /*generated by postite with theese filters
// javascript:void(static function(){
expo
// $($(".tablenoborder tr td:first-of-type .codeph").each(static function(index,node){var nom=$(node).text();var type=$(node).parents("td").first().next("td").find("p").text();var defaut=$(node).parents("td").first().next("td").next("td").find("p").text();console.log("var "+nom+":"+type+ "; "+ "/* "+defaut+"")}) );
// var jq = document.createElement('script'); jq.src = "http://code.jquery.com/jquery-latest.min.js"; document.getElementsByTagName('head')[0].appendChild(jq); jQuery.noConflict()
// }()
// )

*/

//too much comments
package jsf;


import jsf.objects.ExportOptions;
import jsf.objects.elements.Element;
import jsf.Document;
// The format for resolution is {pixelsPerUnit: float, units: string}. Acceptable values for units are “inch“ or “cm“. For instance, dom.setDocumentResolution(resolution) could look like the following example:
typedef Resolution_data_type={
	pixelsPerUnit:Float,
	units:String //inch or cm
}


// static Functions that accept colors as arguments use the HTML syntax "#rrggbb". You can specify a color with an alpha (transparency) component by passing a longer string of the form "#rrggbbaa"
typedef HexColor=String;


typedef Style=Dynamic

typedef Dialogs={
	//Opens the Edit Grids dialog box.
	public  function runEditGrids():Dynamic;
	//Opens the Edit Guides dialog box.
	public  function runEditGuides():Dynamic;
	//Opens the Numeric Transform dialog box.
	public  function runNumericTransform():Dynamic;
}

@:native("fw") //todo
extern class Fw{

static public var activeTool:String; /* The active tool in the application.*/ 
static public var activeViewScale:Float; /* The scaling (zoom value) of the active view.
1.0=100% of the normal view.*/ 
static public var appBatchCodeDir:String; /* The path to the Batch Code directory, which
is expressed as file://URL.*/ 
static public var appDir:String; /* The path to the directory that contains
the Fireworks application, which is expressed as file://URL.*/ 
static public var appExportSettingsDir:String; /* The path to the Export Settings directory,
which is expressed as file://URL. In Fireworks, this
folder is stored on a per-user basis on multiuser systems. Even
on single-user systems, this folder is not inside the Fireworks
installation directory. */ 
static public var appFavoritesDir:String; /* The path to the URL Libraries directory,
which is expressed as file://URL. In Fireworks, this
folder is stored on a per-user basis on multiuser systems. Even
on single-user systems, this folder is not inside the Fireworks
installation directory. */ 
static public var appHelpDir:String; /* The path to the directory that contains
the Fireworks help file, which is expressed as file://URL.*/ 
static public var appHtmlCodeDir:String; /* The path to the HTML Code directory, which
is expressed as file://URL.*/ 
static public var appJsCommandsDir:String; /* The path to the Commands directory, which
is expressed as file://URL.*/ 
static public var appJsExtensionsDir:String; /* The path to the JSExtensions directory,
which is expressed as file://URL.*/ 
static public var appMacCreator:String; /* In the format: "MKBY"*/ 
static public var appMacJsfFileType:String; /* In the format: "TEXT"*/ 
static public var appName:String; /* The name of the application. This attribute
is part of the common API, so it also appears as app.appName (as
implemented in Adobe Dreamweaver).*/ 
static public var appPatternsDir:String; /* The path to the Patterns directory, which
is expressed as file://URL.*/ 
static public var appPrefsDir:String; /* The path to the Preferences directory, which
is expressed as a file://URL.*/ 
static public var appPresetsDir:String; /* The path to the Presets directory, which
is expressed as file://URL.In Fireworks, this folder
is stored on a per-user basis on multiuser systems. Even on single-user
systems, this folder is not inside the Fireworks installation directory. */ 
static public var appSettingsDir:String; /* The path to the Settings directory, which
is expressed as file://URL.*/ 
static public var appSmartShapesDir:String; /* The path to the application’s Auto Shapes
directory, which is expressed as file://URL.*/ 
static public var appSmartShapeToolsDir:String; /* The path to the application’s Auto Shape
Tools directory, which is expressed as file://URL.*/ 
static public var appStylesDir:String; /* The path to the Styles directory, which
is expressed as file://URL.In Fireworks, this folder
is stored on a per-user basis on multiuser systems. Even on single-user
systems, this folder is not inside the Fireworks installation directory. */ 
static public var appSwfCommandsDir:String; /* The path to the SWF Commands directory,
which is expressed as a file://URL.*/ 
static public var appSymbolLibrariesDir:String; /* The path to the Libraries directory, which
is expressed as file://URL.*/ 
static public var appTemplatesDir:String; /* */ 
static public var appTexturesDir:String; /* The path to the Textures directory, which
is expressed as file://URL.*/ 
static public var appXtrasDir:String; /* The path to the Xtras directory, which is
expressed asfile://URL.*/ 
static public var batchStatusString:String; /* The String that currently appears in the
Batch Progress dialog box. Set this property to change the String
being displayed. Use with progressCountCurrent and progressCountTotal.*/ 
static public var currentScriptDir:String; /* The path to the directory of the currently
running script, which is expressed as a file://URL (or could be null).This
path goes to the directory in which the script resides, not a full
file path to the script itself (it excludes the script’s filename).*/ 
static public var currentScriptFileName:String; /* The filename of the currently running script
(or could be null).This name is the script’s
filename, not the full path.*/ 
static public var dialogs:Dialogs; /* Provides access to an instance of the Dialogs
class, which opens specific dialog boxes.*/ 
static public var _dismissBatchDialogWhenDone:Bool; /* If set to true, Fireworks
will automatically close the Batch Process dialog box when the script
finishes. This static function has no effect if the Batch Process dialog
box does not appear.*/ 
static public var documentList:Array<Document>; /* Array of the current open Document objects
(for more information, see The Document object). If no document is open, it returns an Array
of length zero.*/ 
static public var documents:Array<Document>; /* Array of the current open Document objects
(for more information, see The Document object). If no document is open, returns an Array
of length zero.*/ 
static public var ellipseBCPConst:Float; /* A fixed value of 0.55229187012 used to calculate
the distance between a point and its predecessor/successor for a perfect
circle. For example, for a circle with a radius of 100 pixels, the
predecessor/successor is 100*public static function ellipseBCPConst pixels
away from the point itself.*/ 
static public var errorReportingOK:Bool; /* If set to true, Fireworks
will allow posting an error while a script is running.*/ 
static public var files:Dynamic; /* The FilesClass object used to perform file
operations (open, close, delete, and so on).*/ 
static public var getDynamicSWFURL:String; /* Returns the location of the SWF file.*/ 
static public var getEndBackgroundColor:HexColor; /* Returns the end color for the background
gradient. This static function is only useful for the Windows platform.*/ 
static public var getStartBackgroundColor:HexColor; /* Returns the start color for the background
gradient. This static function is only useful for the Windows platform.*/ 
static public var historyPalette:Dynamic; /* History panel object. There are no DOM properties
for the History panel, only API calls. For more information, see History panel static functions.*/ 
static public var isConnectedToInternet:Int; /* Returns whether the operating system is
connected to the Internet. The Start Page has a dynamic content
panel that loads content from the Internet. The Start Page queries
this property before attempting to download the dynamic content.*/ 
static public var mruRecentFilesList:Array<String>; /* Array of recent open files. If there are
no open files, returns an Array length of zero.*/ 
static public var mruRecentFileNames:Array<String>; /* Array of recent open file names. If there
are no open files, returns an Array length of zero.*/ 
static public var platform :String; /* The String "mac" if Fireworks
is running on the Macintosh, or "win" if running
on Windows.*/ 
static public var progressCountCurrent :Int; /* The first number (x) that appears in the
Batch Progress dialog box, in the “File x of y” field. Set this
property to change the number.*/ 
static public var progressCountTotal:Int; /* The second number (y) that appears in the
Batch Progress dialog box, in the “File x of y” field. Set this
property to change the number.*/ 
static public var screenRect:jsf.Rectangle; /* The size of the main screen on this computer,
in pixels. Useful for positioning windows or panels.*/ 
static public var selection:Array<Element>; /* Array of the selected objects in the active
document. If nothing is selected, it returns an Array of length
zero. If no document is open, it returns null. */ 
static public var selectedMask:Dynamic; /* If a single item is selected and that item
is a mask, this property returns an ElementMask object (for more
information, see ElementMask object); otherwise, it returns null.*/ 
static public var styles:Array<Style>; /* Array of the Style object that is currently
loaded in the Style panel (for more information, see Style object).*/ 
static public var textInsertionIndex:Int; /* Insertion index into the current active
text object. If there is no text selected, returns a value of -1.*/ 
static public var textInsertionLength:Int; /* Insertion length into the current active
text object. If there is no text selected, returns a value of -1.*/ 
static public var textOutputEncoding:String; /* The default text encoding for any text file
that the JavaScript interpreter generates. Use "iso-8859-1" for
ASCII or "utf-8" for Unicode.*/ 
static public var userJsCommandsDir:String; /* The path to the user-level Commands directory,
which is expressed as a file://URL.In Fireworks, this folder
is stored on a per-user basis on multiuser systems. Even on single-user
systems, this folder is not inside the Fireworks installation directory. */ 
static public var userSmartShapesDir:String; /* The path to the user’s Auto Shapes directory,
which is expressed as a file://URL*/ 
static public var userSmartShapeToolsDir:String; /* The path to the user’s Auto Shape Tools
directory, which is expressed as a file://URL.*/ 
static public var userSymbolLibrariesDir:String; /* The path to the user’s Symbol Libraries,
which is expressed as file://URL.*/ 
static public var userSwfCommandsDir:String; /* The path to the user-level SWF Commands
directory, which is expressed as a file://URL.In Fireworks,
this folder is stored on a per-user basis on multiuser systems.
Even on single-user systems, this folder is not inside the Fireworks
installation directory. */ 
static public var xhtmlFormat:Bool; /* Determines whether the JavaScript interpreter
should output XHTML formatted files or HTML formatted files; XHTML (true)
or HTML (false).*/ 



//////METHODS ///////

//URL The URL of the page appear in the browser. Any legal URL (including http://, ftp://, and so on) can be passed. Fireworks does not check this argument for syntax; if you pass an illegal value, the browser does not open the URL.
public static function browseDocument(URL:String):Void;

//browseType Acceptable values are "open", "select", and "save". The first two values display an Open dialog box; each is acceptable for compatibility with Adobe Dreamweaver. The third value displays a Save dialog box.title and previewArea Ignored by Fireworks but are accepted for compatibility with Dreamweaver.
public static function browseForFileURL(browseType:String, ?title:String, ?previewArea:Dynamic):String; //The file URL selected by the user, or null if the dialog box was canceled.

//Displays a dialog box that lets a user select a particular directory.
// Arguments
// title An optional string that specifies a title for the dialog box that appears. If it is omitted or null, a default title appears.
// startFolder An optional string that serves as the root directory for the dialog box that appears. If it is omitted or null, the browse dialog box displays an unspecified directory, depending on your system configuration. Generally, it is the last directory used.
public static function browseForFolderURL(?title:String,?startFolder:String):String;

public static function browseHelp(helpID:Int):Void;//Opens the specified help topic in the help viewer.

// Arguments
// version An integer that is reserved for future use; only a value of 0 is supported at this time. To use this static function, put a call to fw.checkFwJsVersion(0) in your script.
public static function checkFwJsVersion(?version:Int=0):Void;//Checks the JavaScript API for incompatibilities.

// primaryBrowser A Bool value that indicates which browser to select. If primaryBrowser is true, Fireworks prompts the user to set the primary browser; if the argument is false, Fireworks prompts the user to set the secondary browser.
public static function chooseBrowser(primaryBrowser:Bool):Void;

// Arguments
// formatlist A list of target documents for an operation. Its use is similar to that in fw.locateDocDialog(), except that formatlist is required, and you cannot specify a maximum number of documents
// Returns
// An array of file://URLs, or null if the dialog box is canceled.

// Description
// Displays a dialog box that lets the user choose the target documents for an operation. The dialog box lets the user specify currently open files, files in the project list, or files that are explicitly selected.
public static function chooseScriptTargetDialog(formatlist:Dynamic):Array<String>;

// Arguments
// document A Document object that specifies the document to close (see The Document object).
// bPromptToSaveChanges An optional Bool argument. If bPromptToSaveChanges is true or omitted and the document has changed since the last time it was saved, the user is prompted to save changes to the document. If bPromptToSaveChanges is false, the user is not prompted, and any changes to the document are discarded.
// Returns
// Nothing.

// Description
// Closes the specified document.
public static function closeDocument(document:Document,?bPromptToSaveChanges:Bool):Void;


// Arguments
// None.

// Returns
// The Document object for the newly created document (see The Document object).

// Description
// Opens a new document and selects it. Values for size, resolution, and color are the same as the current defaults. To specify values other than the defaults, use fw.createFireworksDocument().
public static function createDocument():Document;

// Arguments
// None.

// Returns
// The Document object for the newly created document (see The Document object).

// Description
// Shows the New Document dialog box and allows the user to create a new document.
public static function createDocumentWithDialog():Document;


// Arguments
// size A point whose x value specifies the document’s width and whose y value specifies the document’s height. Both values are in pixels.
// res Specifies the resolution for the scaled document (see Resolution data type).
// backgroundColor A color string (see Color string data type).
// Returns
// The Document object for the newly created document (see The Document object).

// Description
// Opens a new document and selects it. Values for size, resolution, and color are explicitly specified. To open a new document with the current default values, use fw.createDocument().

// Example
// The following command creates a new document that is 500 by 500 pixels in size, with a resolution of 72 dpi and a solid white background color:

// fw.createFireworksDocument({x:500,y:500},{pixelsPerUnit:72,units:"inch"}, "#ffffff");
public static function createFireworksDocument(size:{x:Float,y:Float}, res:Resolution_data_type, backgroundColor:HexColor):Document;
// Description
// Returns the name of the current workspace layout.
public static function currentWorkspaceName():String;

//Reloads the Common Library if you add a new widget, etc. You can reload the library from the JSF as well.
public static function reloadCommonLibrary():Void;
//opens the Edit Grids dialog box.

//Turns off debugging messages for Flash commands. For a description of the Flash debugging capabilities, see fw.enableFlashDebugging(). For more information about constructing Flash command panels for Fireworks, see Flash panels.
public static function disableFlashDebugging():Void;

// Arguments
// autoClose A Bool value. If set to true, the Batch Progress dialog box closes automatically (without user intervention) when the script finishes.
// Returns
// Nothing.

// Description
// Closes the Batch Progress dialog box automatically when the script finishes. This static function has no effect if the Batch Progress dialog box does not appear.
public static function dismissBatchDialogWhenDone(autoClose:Bool):Void;

// Turns on debugging messages for Flash commands. When Flash debugging is enabled, Fireworks displays the command string in a dialog box every time a Flash command calls MMExecute(). The fw.enableFlashDebugging() static function is particularly useful for monitoring which commands are executed in a command panel. For information on how to turn off Flash debugging, see fw.disableFlashDebugging(). For more information about constructing Flash command panels for Fireworks, see Flash panels.

// Note: This debugging command works even if you are running a JavaScript file.
public static function enableFlashDebugging():Void;

// Arguments
// document A Document object (for example, fw.documents[2]) that specifies the document to export. If document is null, the active document is exported.
// Returns
// A Bool value: true if successful; false otherwise.

// Description
// Displays the export dialog box, which is preconfigured to export HTML and images and to copy the HTML code to the clipboard
public static function exportAndCopyHTMLCode(document:Document):Bool;

// Arguments
// docObject A Document object that specifies the document that contains the layers to export (see The Document object). To export layers from the current document, pass null.
// htmlURL HTML folder path.
// mode Can take values  0-3 denoting Multiple Layers, Multiple Slices, Multiple Frames, and Multiple Images respectively.
// imagesURL Path of the images folder.
// trim True if the document trims; false otherwise.
// Returns
// A Bool value: true if successful; false otherwise.

// Description
// Exports document as CSS layers and images. The image names are based on the names in the Layers panel.
public static function exportCSSLayers(doc:Document, mode:Int, htmlURL:String, imagesURL:String, trim:Bool):Bool;

// Arguments
// document A Document object—for example fw.documents[2]—that specifies the document to export. If document is null, the active document is exported.
// fileURL Specifies the filename for the exported file. If fileURL is null, Fireworks displays the Export dialog box.
// Returns
// A Bool value: true if successful; false otherwise.

// Description
// Exports the specified document to the specified file as layers to be imported into Adobe Director.
public static function exportDirectorAsLayers(doc:Document,fileURL:String):Bool;

// Arguments
// document A Document object, for example, fw.documents[2], that specifies the document to export. If document is null, the active document is exported.
// fileURL Specifies the filename for the exported file. If fileURL is null, Fireworks displays the Export dialog box.
// Returns
// A Bool value: true if successful; false otherwise.

// Description
// Exports the specified document to the specified file as Adobe Director images.
public static function exportDirectorAsSlices(doc:Document,fileURL:String):Bool;


// Arguments
// document A Document object, for example, fw.documents[2], that specifies the document to be exported. If document is null, the active document is exported.
// fileURL A string, which is expressed as a file://URL, that specifies the filename for the exported file. If fileURL is null, the Save As dialog box is displayed.
// exportOptions An ExportOptions object (see ExportOptions object). If exportOptions is null, the document’s current export options are used. If the file format specified by exportOptions conflicts with the file format specified by fileURL, then the extension of fileURL is changed to match the format specified by exportOptions.
// Returns
// A Bool value: true if successful; false otherwise.

// Description
// Exports the specified document to the specified file.
public static function exportDocumentAs(document:Document, fileURL:String, exportOptions:ExportOptions):Bool;

// Arguments
// docObject A Document object that specifies the document that contains the frames to export (see The Document object). To export frames from the current document, pass null.
// directoryURL The directory where the images will be placed, which is expressed as a file://URL.
// Returns
// A Bool value: true if successful; false otherwise.

// Description
// Exports a document’s frames as individual images. The image names are based on the names in the Frames panel.

// Example
// The following command exports the frames in the current document to the C:\images directory:

// fw.exportFrames(null, "file:///C|/images");
public static function exportFrames(doc:Document,directoryURL:String):Bool;
// Arguments
// doc specifies the document to be exported. The document that is currently open in Fireworks is exported if null is specified for this parameter.
// pages “”all pages” or “current page” or “selected objects”.
// fileUrl “Specifies the file location to which it has to be exported.
// Returns
// A Bool value: true if successful; false otherwise.

// Description
// Exports current page, all pages of the open document in Fireworks, or selected objects from the current page as FXG files.
public static function exportFXG(doc:Document,pages:String,fileUrl:String):Bool;

// Arguments
// doc A Document object that specifies the document to be exported (see The Document object). If doc is null, the active document is exported.
// htmlUrl The filename of the exported HTML file, which is expressed as a file://URL. If htmlUrlis null, no HTML is generated.
// imagesUrl The name of the file containing the exported image(s), which is expressed as a file://URL, and might not be null. If a single image is generated, this static function uses imagesUrl as the name of the image file. If multiple sliced images are exported, it uses imagesURL to generate automatically named images, and all images are placed in this directory.
// Returns
// A Bool value: true if successful; false otherwise.

// Description
// Exports one image if the document contains no slice objects and multiple images if the document contains one or more slice objects. It also optionally exports HTML. The document is exported using the current export settings and export options.

// Example
// The following command exports the current document as HTML and as one or more images.

// fw.exportHtmlAndImages(null, "file:///C|/mysite/nav.htm", "file:///C|/mysite/images/nav.gif");
public static function exportHtmlAndImages(doc:Document, htmlUrl:String, imagesUrl:String):Bool;

// Arguments
// document A Document object, for example, fw.documents[2], that specifies the document to export. If document is null, the active document is exported.
// fileURL Specifies the filename for the exported file. If fileURL is null, Fireworks displays the Export dialog box.
// Returns
// A Bool value: true if successful; false otherwise.

// Description
// Exports the specified document to the specified file in Adobe Illustrator format.
public static function exportIllustrator(doc:Document,fileURL:String):Bool;

// Arguments
// docObject A Document object that specifies the document that contains the layers to export (see The Document object). To export layers from the current document, pass null.
// directoryURL The directory in which the images will be placed, which is expressed as a file://URL.
// Returns
// A Bool value: true if successful; false otherwise.

// Description
// Exports a document’s layers as individual images. The image names are based on the names in the Layers panel. The layers from the current frame are exported.

// Example
// The following command exports the layers in the third open document to the C:\images directory.

// fw.exportLayers(fw.documents[2], "file:///C|/images");
public static function exportLayers(docObject:Document, directoryURL:String):Bool;

// Arguments
// doc A Document object that specifies the document to be exported (see The Document object). If doc is null, the active document is exported.
// htmlUrl The filename of the exported MXML file, which is expressed as a file://URL. If htmlUrlis null, no MXML is generated.
// imagesUrl The name of the file containing the exported image(s), which is expressed as a file://URL, and might not be null. If a single image is generated, this static function uses imagesUrl as the name of the image file. If multiple sliced images are exported, it uses imagesURL to generate automatically named images, and all images are placed in this directory.
// Returns
// A Bool value: true if successful; false otherwise.

// Description
// Exports one image if the document contains no slice objects and multiple images if the document contains one or more slice objects. It also optionally exports MXML. The document is exported using the current export settings and export options.

// Example
// The following command exports the current document as HTML and as one or more images.

// fw.exportMXMLAndImages(null, "file:///C|/mysite/nav.htm", "file:///C|/mysite/images/nav.gif");
public static function exportMXMLAndImages(doc:Document, htmlUrl:String, imagesUr:String):Bool;


//fw.exportPages(doc object,"Images/FWPNG","Current/All",fileURL)
// Arguments
// Images settings from the Optimize panel are used to export the page(s).
// Values Default argument values are “Images”, and “Current”.
// Returns
// None.

// Description
// Exports the specified pages in the specified format.

// Example
// fw.exportPages(null,"FWPNG","All","file:///Snow Leopard/a/test");
// It exports all pages in the current document in Fireworks PNG format under the location /Snow Leopard/ folder name. The "test" at the end is used to signify a file. Page names are used to assign filenames.
public static function exportPages(doc:Document,images:String,selection:String,fileURL:String):Void;

// Arguments
// doc Document object (for example, fw.documents[2]) that specifies the document to be exported. To export frames from the current document, pass null.
// pdfURL Specifies the filename for the exported file. If pdfURL is null, Fireworks displays the Export dialog box.
// Returns
// A Bool value: true if successful; false otherwise.

// Description
// Exports the specified document to the specified file in PDF format.
public static function exportPDF(doc:Document,pdfURL:String):Bool;

// Arguments
// docObject A Document object that specifies the document to export (see The Document object). To export the current document, pass null.
// PSDDocumentURL The name of the Photoshop document to be created, which is expressed as a file://URL.
// Returns
// A Bool value: true if successful; false otherwise.

// Description
// Exports a Fireworks document as a Photoshop document.
public static function exportPSD(doc:Document, PSDDocumentURL:String):Bool;

// Arguments
// docObject A Document object that specifies the document to be exported (see The Document object). To export the current document, pass null.
// FlashDocumentURL The name of the Adobe Flash document to be created, which is expressed as a file://URL.
// Returns
// A Bool value: true if successful; false otherwise.

// Description
// Exports a Fireworks document as a Adobe Flash document.
public static function exportSWF(doc:Document,FlashDocumentURL:String):Bool;
// Arguments
// macAppSignature A Macintosh-specific string that identifies the signature of the application to find, such as “MKBY“.
// winExeRegistryName A Windows-specific string that identifies the name of an executable to find in the Windows registry, such as “Fireworks.exe“.
// Returns
// A URL to the application. This URL can be passed as an argument to fw.launchApp(). If no such application can be found, the URL is empty.

// Description
// Attempts to find the path to the requested application. On the Macintosh, Fireworks looks for the application using a four-character signature code. In Windows, Fireworks looks in the Windows registry underHKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths.
public static function findApp(macOrWin:String):String;

// Returns
// The number of items that are replaced if the search is completed, or –1 if there are items in the document that remain to be searched.

// Description
// Finds the next instance of the current search string and selects that section of the document. To begin a search, use fw.setUpFindReplace().
public static function findNext():Int;
// Arguments
// docname A string that specifies the name of the document, which is expressed as file://URL.
// Returns
// If the document is open, returns the Document object; otherwise, returns null (see The Document object).

// Description
// Determines whether the specified file is open in a Fireworks Document window.
public static function findOpenDocument(docName:String):Null<Document>;

// Arguments
// color RGB value of the color.
// Returns
// The hex value of blue color in the selected object.

// Description
// Returns the hex value of blue color in the selected object.
public static function getBlue():HexColor;
// Arguments
// which-string  An optional string that is included for compatibility with Dreamweaver. If specified here, it must be "document".

// Returns
// The Document object for the active document, or null if no document is open.

// Description
// Gets the Document object for the active document (see The Document object).
public static function getDocumentDOM(?whichString:String="document"):Null<Document>;

/*

@see Document additional meth
public static function getDocumentDOM().combineCompoundShape
public static function getDocumentDOM().createCompoundShape
public static function getDocumentDOM().InsertPageForImport
public static function getDocumentDOM().VectorOperation
*/


// Arguments
// document A Document object, for example, fw.documents[2], that specifies the document whose path and filename should be retrieved. If document is null, information about the active document is retrieved.
// Returns
// The file URL for the document if it was saved or an empty string if it has not been saved.

// Description
// Gets the path and filename of the specified document.
public static function getDocumentPath(doc:Document):String;

//fuckit
public static function getFamilyNameForPSFont(font:String):String;

// Returns
// An array like the one in the following example:

// [ [ "stroke", "fill", "effect" ], [ "layers", "frames", "object" ], [ "mixer", "options", "swatches", "info" ], [ "styles", "library" ], [ "find", "project log" ], [ "url" ], [ "optimize", "optimized colors" ], [ "behaviors" ], [ "history" ] ]
// Note: Any panels not specified in the list of valid arguments (like those in the Command Panels folder which are “outside” the Fireworks application) should be named exactly as they appear in the file system without their file extension. For example, the valid argument name for the Align panel (Align.swf) is "Align", and a valid name for a custom panel file mypanel.swf would be "mypanel".
// Description
// Gets an array of arrays that indicates the tab-grouping of the panels (even hidden ones).
public static function getFloaterGroupings():Array<Array<String>>;

// Arguments
// panelName Acceptable values are "find", "project log", "object", "info", "url", "effect", "history", "mixer", "fill", "stroke", "swatches", "layers", "frames", "behaviors", "optimize", "library", "styles", "optimized colors", "options", and "toolbox".
// Note: Any panels not specified in the list of valid arguments (like those in the Command Panels folder which are “outside” the Fireworks application) should be named exactly as they appear in the file system without their file extension. For example, the valid argument name for the Align panel (Align.swf) is "Align", and a valid name for a custom panel file mypanel.swf would be “mypanel”.
// Returns
// A rectangle that specifies the bounds of the panel (see Rectangle data type).

// Description
// Gets the screen position and size of the specified panel.
public static function getFloaterPosition(panelName:String):jsf.Rectangle;
//@see getFloaterPosition for valuable argument
public static function getFloaterVisibility(panelName:String):Bool;
//@see getBlue
public static function getGreen():HexColor;
//Returns the hidden or visible status of the panels.
public static function getHideAllFloaters():Bool;
//Returns an HTML file.
public static function getHTMLFileForScript():String;
/*Arguments
filename The name of the file that contains the tables to be counted.
Returns
A long integer that represents the number of tables in the document.

Description
Returns the number of top-level (that is, non-nested) tables in a document.*/
public static function getNumberOfTables(filename:String):Int;
//Returns the platform name of the PostScript font.
public static function getPlatformNameForPSFont(psFontName:String):String;

//Returns the Preference value (string or numeric) that is associated with the specified Preference key.
public static function getPref(prefKey:String):Dynamic;
//@see getBlue 
public static function getRed():HexColor;
//Returns the style name of the PostScript font.
public static function getStyleNameForPSFont(font:String):String;
//Converts internal names (such as fn_Normal) which do no change across languages to UI names (such as Normal) which can change across languages. The UI name is what gets displayed to the user. Returns the internal name if no conversion is found.
public static function internalNameToUIName(internalName:String):String;

/*Arguments
appPath A file URL that specifies the executable to start. Typically, this value can be obtained by calling fw.findApp().
filePathsToOpen An array of file URLs to open in the executable to start. It is safe to pass an empty array.
Returns
A Bool value that indicates whether the application started successfully.

Description
Starts an application using a file URL that is returned by fw.findApp(). You can specify, optionally, files to open in the application.*/
public static function launchApp(appFile:String):Bool;
/*Arguments
url The URL to open in the primary web browser.
Returns
Nothing.

Example
The following command starts a browser that opens to the Adobe website:

fw.launchBrowserTo("http://www.Adobe.com");
Description
Starts Fireworks’ primary web browser to open a URL.*/
public static function launchBrowserTo(url:String):Void;
//@see http://help.adobe.com/en_US/fireworks/cs/extend/WSBC41EF47-62A8-4086-8F11-D752E680D6BC.html
public static function locateDocDialog(maxnumdocs:Int,formatlist:Array<String>):Array<String>;

/*Arguments
red Decimal value of red color.
green Decimal value of green color.
blue Decimal value of blue color.
Returns
RGB pixel value.

Description
Combines the individual hex values into a single RGB value.*/
public static function makeRGBColor(red:Int,green:Int,blue:Int):Dynamic;//don't know the type >Dynamic
//Moves the keyboard focus to the document window.
public static function moveFocusToDoc():Void;
/*Arguments
Arg1 Absolute path of the file which is to be used as a template.
Returns
None.

Description
Opens up a file for selecting any template from the pre-defined Templates folder in Fireworks installation directory. Specifying null in the argument will open the Template open dialog.*/
public static function newDocumentFromTemplate(arg1:String):Void;
/*Usage
fw. newMobileDocument("ssss",100,100,100);
Arguments
Arg1 Device Name (Ignored by Fireworks)
Arg2 Width.
Arg3 Height.
Arg4 Resolution.
Returns
None.

Description
Creates a mobile document with the width, height, and resolution details.*/
public static function newMobileDocument(arg1:String,arg2:Float,arg3:Float,arg4:Float):Void;
/*Arguments
fileURl A string or an array of strings, each expressed as a file://URL, that specifies the files to be opened. This argument is optional. If fileURL is omitted or null, the Open Document dialog box appears.
bOpenAsNew If bOpenAsNew, which was added in Fireworks 4, is true, the files are opened as unsaved and untitled documents. If bOpenAsNew is false (the default value), they are opened with their original names. This argument is optional.
bOpenWithWindowHidden Bool. If bOpenWithWindowHidden, which was added in Fireworks 8, is true, and if there is only one document to open, the document will be hidden when opened. If more than one document is being opened, this parameter is ignored. The default value is false. This parameter was added to enhance the Batch Process feature.
Returns
If any of the files can be opened, returns the Document object for each file. Returns null if none of the documents can be opened.

Description
Opens the specified files in new document windows. If a file is already open, it opens again; to avoid redundant open operations, call findOpenDocument() first.*/
public static function openDocument(?fileURL:String,?bOpenAsNew:Bool=false, ?bOpenWithWindowHidden:Bool=false):Dynamic; //not clear returning value



//Brings up the Open dialog. Users can select and open multiple files in new document windows. If a file is already open, it opens again; to avoid redundant opens, call findOpenDocument() first.
public static function openMultiDocument():Void;

/*Arguments
screenLoc The location at which the dialog box appears, in the form of a point {x:float, y: float} (for syntax details, see Point data type).
initialColor The initially selected color in the dialog box, in the form #rrggbbaa (for syntax details, see Color string data type).
allowTransparent A Bool value that lets the user select a transparent color; set to true for transparent, false otherwise.
forceWeb216 A Bool value that forces the specified color to fall within the web216 panel; set to true to force the color change, false otherwise.
Returns
The specified color in #rrggbbaa format (for syntax details, see Color string data type).

Description
Opens the pop-up color swatches dialog box to let the user select a color.*/
public static function popupColorPicker(screenLoc:jsf.Point, initialColor:HexColor, allowTransparent:Bool, forceWeb216:Bool):HexColor;

//Opens the color pop-up window at the current mouse location to let the user select a color
public static function popupColorPickerOverMouse(initialColor:HexColor, allowTransparent:Bool, forceWeb216:Bool):HexColor;

public static function previewInDeviceCentral():Void;

//Quits Fireworks, but prompts the user to save any changed documents before exiting. Identical to fw.quitApplication().
public static function quit():Void;

public static function quitApplication():Void;
/*Arguments
filename A fileURL for the file that contains the desired table.
tablenumber A long integer that specifies the desired table; the tables are zero-indexed.
Returns
A database that is constructed from the table data.

Description
Reads the specified table. The tables are zero-indexed.*/
public static function readNthTable(filename:String, tablenumber:Int):Dynamic;
//Reads in a panel state file, which is generated by fw.writePanelStateToFile(), and moves the panels, Property inspector, and toolbox to the appropriate locations.
public static function readPanelStateFromFile(filepath:String):Void;

/*Returns
The number of items that are replaced, or –1 if there are items in the document that remain to be searched.

Description
Verifies that the selection matches the current search string and replaces it with the replacement string.*/
public static function replace():Int;

/*Returns
The number of items replaced, or –1 if the search is not yet complete.

Description
Performs a replace all operation on the active document using the current search‑and‑replace strings.*/
public static function replaceAll():Int;

//Resets all warnings that have a "Don't show me again" checkbox to popup when encountered by the user.
public static function resetWarnings():Void;

/*Arguments
document A Document object, for example, fw.documents[2], that specifies the document to be reverted. This argument is optional. If document is omitted or null, the active document is reverted.
Description
Restores the specified document to its previously saved version.*/
public static function revertDocument(doc:jsf.Document):Void;

/*Arguments
filename The name of the script file to execute. If filename is not a file URL (that is, if it does not begin with "file:///"), it is assumed to be the name of a file in the Fireworks /Configuration/Commands folder.
Returns
Result of script.

Description
Executes a JavaScript file.

Example
The following command runs a script found in the Align Center to Document.jsf file, which is located in the Commands folder.

fw.runScript("Align Center to Document.jsf");*/
public static function runScript(filename:String):Dynamic;
//Saves all open documents, displaying the Save As dialog box for any documents that were not previously saved.
public static function saveAll():Void;

/*Arguments
doc The document object (for example, fw.documents[2]) that specifies the document to be saved. If document is null, the active document is saved.
url The file URL for the saved document, or null if the dialog box is to come up.
defaultfromoptions By default false. Set true to save the document as per the current optimization settings. The extension of the URL changes as per the optimization settings.

Description
Saves the specified document in the specified filename and format.*/
public static function saveAs(doc:jsf.Document, url:String,?defaultfromoptions:Bool=false):Void;

//Saves the specified document as a native Fireworks PNG file with the specified name. To save a document to another format, such as GIF or JPEG, use fw.exportDocumentAs().
public static function saveDocument(document:jsf.Document, ?fileURL:String):Void;


/*Returns
The file URL for the saved document, or null if the dialog box was canceled.

Description
Displays the Save As dialog box for the specified document, so that it can be saved as a native Fireworks PNG file with the specified name. To save a document to another format, such as GIF or JPEG, use fw.exportDocumentAs().*/
public static function saveDocumentAs(document:jsf.Document):Null<String>;


/*Usage
fw.saveDocumentAsTemplate(fw.documents[1],"file:///C:/file2.png");
Arguments
Arg1 A Document object.
Arg2 A Absolute file path for saving the file as a template.
Description
Saves the current document as a template.*/
public static function saveDocumentAsTemplate(doc:jsf.Document,arg2:String):Void;


//Works the same as fw.saveDocumentAsTemplate() except for the async mode of save operation.
public static function saveDocumentAsTemplateAsync(arg1:jsf.Document,arg2:String):Void;

/*Returns
The file URL for the saved document, or null if the dialog box was canceled.

Description
Saves a copy of the specified document as a native Fireworks PNG file with the specified name. To save a document to another format, such as GIF or JPEG, use fw.exportDocumentAs().*/
public static function saveDocumentCopyAs(doc:jsf.Document,fileUrl:String):Null<String>;

//Saves the specified string of JavaScript code as a JSF command file. Fireworks writes the file using UTF-8 encoding and prepends the UTF-8 byte order mark to the file that is written.
public static function saveJsCommand(jscode:String,filename:String):Void;


/*Arguments
scale A floating-point number where 1.0 is 100%, or normal view, and 1.5 is 150%. Default is 6%.
center A point that defines the location in the document at which the view should be centered. This argument can be used to navigate around different parts of the document.
Returns
Nothing.

Description
Sets the zoom amount and the center of the view for the current document.*/
public static function setActiveViewScale(scale:Float,center:Point):Void;

// Arguments
// document A Document object, for example, fw.documents[2], that specifies which document should be made active.
// trueFalse This optional argument is ignored by Fireworks. It is included only for Dreamweaver compatibility.
// Returns
// Nothing.

// Description
// Sets the specified document as the active document.

// Example
// The following command makes the fourth document the active document.
public static function setActiveWindow(document:jsf.Document,?onlyforDreamweaver:Bool):Void;


/*Arguments
panelNameToMove A lowercase string that specifies the panel to be moved.
panelNameToReceive A lowercase string that specifies the panel into which the panelNameToMove panel should move. If panelNameToReceive is null, the panelNameToMove panel moves into its own panel. Acceptable values are "find", "project log", "object", "info", "url", "effect", "history", "mixer", "fill", "stroke", "swatches", "layers", "frames", "behaviors", "optimize", "library", "styles", "optimized colors", "options", and "toolbox".
Note: Any panels not specified in the list of valid arguments (like those in the Command Panels folder which are “outside” the Fireworks application) should be named exactly as they appear in the file system without their file extension. For example, the valid argument name for the Align panel (Align.swf) is "Align", and a valid name for a custom panel file mypanel.swf would be "mypanel".
Returns
Nothing.

Description
Moves the specified panel into another panel, changing it to a tab within that panel. This is the same behavior as dragging a tab from one panel to another or to its own panel.

Example
The following command moves the Stroke tab from its current location into the panel named Object. Although the panel name might be capitalized onscreen, it must be passed as lowercase.

fw.setFloaterGrouping("stroke", "object");*/
public static function setFloaterGrouping(panelNameToMove:String, panelNameToReceive:String):Void;


/*Arguments
panelName Acceptable values are "find", "project log", "object", "info", "url", "effect", "history", "mixer", "fill", "stroke", "swatches", "layers", "frames", "behaviors", "optimize", "library", "styles", "optimized colors", "options", and "toolbox".
Note: Any panels not specified in the list of valid arguments (like those in the Command Panels folder which are “outside” the Fireworks application) should be named exactly as they appear in the file system without their file extension. For example, the valid argument name for the Align panel (Align.swf) is "Align", and a valid name for a custom panel file mypanel.swf would be "mypanel".
boundingRectangle A rectangle that specifies the size of the panel (see Rectangle data type). Some panels ignore the specified size but place the upper-left corner of the panel at the upper-left of the specified rectangle.
Returns
Nothing.

Description
Sets the position and size of a panel.*/
public static function setFloaterPosition(panelName:String, boundingRectangle:jsf.Rectangle):Void;


/*Arguments
panelName Acceptable values are "find", "project log", "object", "info", "url", "effect", "history", "mixer", "fill", "stroke", "swatches", "layers", "frames", "behaviors", "optimize", "library", "styles", "optimized colors", "options", and "toolbox".
Note: Any panels not specified in the list of valid arguments (such as those in the Command Panels folder, which are “outside” the Fireworks application) should be named exactly as they appear in the file system without their file extension. For example, the valid argument name for the Align panel (Align.swf) is "Align", and a valid name for a custom panel file mypanel.swf would be "mypanel".
bVisible If bVisible is true, the specified panel is visible. If bVisible is false, the panel is hidden.
Description
Shows or hides the specified panel.*/
public static function setFloaterVisibility(panelName:String, bVisible:Bool):Void;

//Shows or hides the panels. This behavior is the same as the Tab key behavior.
public static function setHideAllFloaters(bHide:Bool):Void;

/*Arguments
prefname and prefval A complete list of these values is beyond the scope of this documentation, but the format of prefname and prefval exactly matches those in the Fireworks Preferences file. To return the value that is associated with a Preference key, use fw.getPref().
Description
Sets the value that is associated with the specified Preference key.*/
public static function setPref(prefname:String, prefval:String):Void;

//Sets up a search.
public static function setUpFindReplace(findSpec:jsf.core.Find):Void;
/*Arguments
panelName Acceptable values are "find", "project log", "object", "info", "url", "effect", "history", "mixer", "fill", "stroke", "swatches", "layers", "frames", "behaviors", "optimize", "library", "styles", "optimized colors", "options", and "toolbox".
Note: Any panels not specified in the list of valid arguments (like those in the Command Panels folder which are “outside” the Fireworks application) should be named exactly as they appear in the file system without their file extension. For example, the valid argument name for the Align panel (Align.swf) is "Align", and a valid name for a custom panel file mypanel.swf would be "mypanel".
Returns
Nothing.

Description
Shows or hides the specified panel, or makes it topmost.

If the panel is hidden, this static function shows it and makes it topmost.
If the panel is topmost, this static function hides it.
If the panel is shown but is not topmost, this static function makes it topmost.*/
public static function toggleFloater(panelName:String):Void;


//Replaces selected primitive objects with their equivalent paths. The new objects have all the attributes (mask, stroke, fill, and so on) of the replaced ones.
public static function ungroupPrimitives():Void;

/*Arguments
doc A Document object that specifies the document to be used for updating the HTML (see The Document object). If doc is null, the active document is used.
htmlUrl The filename of the HTML file to update, which is expressed as a file://URL. To force Fireworks to display the Update HTML dialog box, pass null for htmlUrl. If you pass null for htmlUrl, bRecoverFromError is ignored.
bRecoverFromError If bRecoverFromError is true and the HTML update encounters an error, Fireworks displays a Confirmation dialog box and attempts to recover. If it is false, Fireworks fails without notifying the user if it encounters an error.
Returns
A Bool value: true if the HTML was updated; false otherwise.

Description
Updates the HTML that was previously exported from Fireworks.

Example
The following command updates the images in an HTML file, using the current document.

fw.updateHTML(null, "file:///C|/mysite/nav.htm", true);*/
public static function updateHTML(doc:jsf.Document, htmlUrl:String, bRecoverFromError:Bool):Bool;
//Writes out the panel states (location, size, open or closed, and so on), toolbox state, and Property inspector state to an XML file that is specified by the argument.
public static function writePanelStateToFile(filepath:String):Void;


/*Arguments
promptString The prompt message that appears in the dialog box.
Returns
A Bool value: true if the user selected the Yes button; false otherwise.
Description
Displays a dialog box that contains buttons labeled Yes and No.
Example
The following code displays a dialog box with Yes and No buttons and the message “Would you like to duplicate the element?”
var shouldDuplicate = fw.yesNoDialog("Would you like to duplicate the element?");*/
public static function yesNoDialog(promptString:String):Bool;



/// additional functions for property inspector panel
//http://help.adobe.com/en_US/fireworks/cs/extend/WS5b3ccc516d4fbf351e63e3d1183c94988d-7ffa.html


public static function showPIWindow():Void;
public static function hidePIWindow():Void;
public static function isPIExpanded():Void;
public static function isPIVisible():Void;
public static function growPIWindow():Void;
public static function shrinkPIWindow():Void;
public static function setPIPosition(pt:Point):Void;
public static function getPIPosition():Point;



//History panel functions

//These functions control the History panel.
//TODO
// public static function historyPalette.clearSteps()
// public static function historyPalette.copySteps()
// public static function historyPalette.getSelection()
// public static function historyPalette.getStepCount()
// public static function historyPalette.getStepsAsJavaScript()
// public static function historyPalette.getUndoState()
// public static function historyPalette.replaySteps()
// public static function historyPalette.saveAsCommand()
// public static function historyPalette.setSelection()
// public static function historyPalette.setUndoState()
}